worker_processes  8;
error_log logs/error.log debug; #暂时开放到debug级别，默认是error
events {
    worker_connections 1024;
}
http {
    include       mime.types;   # MIME类型与后缀对应表
    default_type  application/json;
	lua_package_path "/Users/lee/mywork/lua/lua-learn/nginx-lua/abc/lua/?.lua;/usr/local/Cellar/openresty/1.13.6.2/?.lua;;";    #拓展默认搜索路径,require后的字段会替代‘?’,双分号表示把默认路径添加到后面
	lua_package_cpath "/usr/local/Cellar/openresty/1.13.6.2/lualib/?.so;;";

    sendfile        on;         #是否使用sendfile系统调用来传输文件
    keepalive_timeout  65;

    server {
        listen 8080;
        server_name test_server;

        location / {
            default_type text/html;
            content_by_lua '
                ngx.say("<p>hello, world</p>")
            ';
        }

        location ~ /lua_request/(\d+)/(\d+) {
            #设置nginx变量
            set $a $1;
            set $b $host;
            default_type "text/html";
            #nginx内容处理
            content_by_lua_file /Users/lee/mywork/lua/lua-learn/nginx-lua/abc/lua/test_request.lua;
            #内容体处理完成后调用
            echo_after_body "ngx.var.b $b";
        }

        location /lua_response_1 {
            default_type "text/html";
            content_by_lua_file /Users/lee/mywork/lua/lua-learn/nginx-lua/abc/lua/test_response_1.lua;
        }

        location /lua_response_2 {
            default_type "text/html";
            content_by_lua_file /Users/lee/mywork/lua/lua-learn/nginx-lua/abc/lua/test_response_2.lua;
        }

        location /lua_other {
            default_type "text/html";
            content_by_lua_file /Users/lee/mywork/lua/lua-learn/nginx-lua/abc/lua/test_other.lua;
        }
    }

    server {
        listen      38083;
        server_name  localhost;
        charset utf-8;
        access_log logs/access.log;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}

        location @auth_success{     #重定向
            proxy_set_header Host $http_host;
            proxy_pass  http://$backend;
		}

        location ^~ /hgs/ {     # 普通location^ 表示“非”，~ 表示“正则”，字符意思是：不要继续匹配正则，可以匹配 /hgs/* ，即使有正则location可以匹配更长的前缀也不匹配
            set $backend '';
            rewrite_by_lua_file /Users/lee/mywork/lua/lua-learn/nginx-lua/abc/lua/app_route.lua;
	        header_filter_by_lua_file /Users/lee/mywork/lua/lua-learn/nginx-lua/abc/lua/handlefile/handle_cors.lua;
		    if ($request_method = 'OPTIONS') {  # 获取主请求的请求方法
			    return 204;
		    }
   	        access_by_lua_file /Users/lee/mywork/lua/lua-learn/nginx-lua/abc/lua/handlefile/handle_request_provision.lua;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}